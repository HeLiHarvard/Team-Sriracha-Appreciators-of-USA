from scipy.stats import multivariate_normal


#copied from Kate's homework. TODO: make this work with many more classes
#generative predictor:
#make pi
pi = pd.DataFrame(0, index=[1, 2, 3], columns=['probability'])
for n in range(len(width)):
    for k in [1, 2, 3]:
        if Y.iloc[n][0]==k:
            pi.ix[k]=pi.ix[k]+1
#pi = pi/ len(width) do this last

#make mu
mu = pd.DataFrame(0, index=[1, 2, 3], columns=['width', 'height'])
for n in range(len(width)):
    for k in [1, 2, 3]:
        if Y.iloc[n][0]==k:
            mu.ix[k]=mu.ix[k]+ X.ix[n][['width', 'height']]
for k in [1, 2, 3]:
    mu.ix[k]=mu.ix[k]/pi.ix[k][0]

#make S
S1 = pd.DataFrame(0, index=['width', 'height'], columns=['width', 'height'])
S2 = pd.DataFrame(0, index=['width', 'height'], columns=['width', 'height'])
S3 = pd.DataFrame(0, index=['width', 'height'], columns=['width', 'height'])
k=1
for n in range(len(width)):
    if Y.iloc[n][0]==k:
        blah=(X.ix[n][['width', 'height']] - mu.ix[k][['width', 'height']])
        S1=S1+ pd.DataFrame(blah).dot(pd.DataFrame(blah).transpose())
k=2
for n in range(len(width)):
    if Y.iloc[n][0]==k:
        blah=(X.ix[n][['width', 'height']] - mu.ix[k][['width', 'height']])
        S2=S2+ pd.DataFrame(blah).dot(pd.DataFrame(blah).transpose())
k=3
for n in range(len(width)):
    if Y.iloc[n][0]==k:
        blah=(X.ix[n][['width', 'height']] - mu.ix[k][['width', 'height']])
        S3=S3+ pd.DataFrame(blah).dot(pd.DataFrame(blah).transpose())

S1=S1/pi.ix[1][0]
S2=S2/pi.ix[2][0]
S3=S3/pi.ix[3][0]

pi = pi/ len(width)

def classifier3(data):
    var1=multivariate_normal(mean=mu.ix[1].values, cov=S1.values)
    var2=multivariate_normal(mean=mu.ix[2].values, cov=S2.values)
    var3=multivariate_normal(mean=mu.ix[3].values, cov=S3.values)
    class1=var1.pdf(data)*pi.ix[1]
    class2=var2.pdf(data)*pi.ix[2]
    class3=var3.pdf(data)*pi.ix[3]
    class1=class1['probability']
    class2=class2['probability']
    class3=class3['probability']
    if class1> class2 and class1> class3:
        return 1
    elif class2> class1 and class2> class3:
        return 2
    elif class3>class2 and class3>class1:
        return 3