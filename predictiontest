from scipy.stats import multivariate_normal

#X= dataframe of features (training) 
#Y = dataframe of what class it is (training)
#copied from Kate's homework. 

numtrain=1516 #size of training data
#TODO: make this work with many more classes
#generative predictor:
#make pi
pi = pd.DataFrame([0.0369, 0.0162, 0.0120, 0.0103, 0.0133, 0.0126, 0.0172, 0.0133, 0.5214, 0.0068, 0.1756, 0.0104, 0.1218, 0.0191, 0.0130], index=range(15), columns=['probability'])
#switch from probability to count
pi=numtrain*pi

featureslist=[first_last_system_call_feats, system_call_count_feats] #featureslist: list of the names of the features. 
#make mu
mu = pd.DataFrame(0, index=range(15), columns=featureslist)
for n in range(len(width)):
    for k in range(15):
        if Y.iloc[n][0]==k:
            mu.ix[k]=mu.ix[k]+ X.ix[n][featureslist]
for k in range(15):
    mu.ix[k]=mu.ix[k]/pi.ix[k][0]

#make list of covariance dataframes
S1 = pd.DataFrame(0, index=featureslist, columns=featureslist)
covlist=[S1 for i in range(15)]

for k in range(15):
	for n in range(len(width)):
    	if Y.iloc[n][0]==k:
        	blah=(X.ix[n][featureslist] - mu.ix[k][featureslist])
        	covlist[k]=covlist[k]+ pd.DataFrame(blah).dot(pd.DataFrame(blah).transpose())

for k in range(15):
	covlist[k]=covlist[k]/pi.ix[k].[0]

#switch from count to probability
pi=pi*1/(numtrain)


varlist=[multivariate_normal(mean=mu.ix[k].values, cov=covlist[k].values) for k in range(15)]
#TODO: finish changing this.

def classifier3(data):
	classlist=[varlist[k].pdf(data)*pi.ix[k] for k in range(15)]
	for k in range(15):
		classlist[k]=classlist[k]['probability']
	#copied from internet, see if works
	index, value = max(enumerate(my_list), key=operator.itemgetter(1))
	return index